================================================================================
File: src/components/AdvancedSearch.js
================================================================================
import React from 'react';
import { Plus, Trash2 } from 'lucide-react';
import AdvancedSearchCondition from './AdvancedSearchCondition';

const AdvancedSearch = ({ conditions, setConditions, fieldOptions, allLists, allCategories }) => {
  const addCondition = () => {
    setConditions([...conditions, { field: 'name', operator: 'contains', value: '', conjunction: 'AND' }]);
  };

  const updateCondition = (index, newCondition) => {
    const newConditions = [...conditions];
    newConditions[index] = newCondition;
    setConditions(newConditions);
  };

  const removeCondition = (index) => {
    setConditions(conditions.filter((_, i) => i !== index));
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md mb-6">
      <h3 className="text-xl font-semibold mb-4 text-gray-800">Advanced Search</h3>
      <div className="space-y-4">
        {conditions.map((condition, index) => (
          <div key={index} className="flex items-start">
            <div className="w-20 pt-2">
              {index > 0 && (
                <select
                  value={condition.conjunction}
                  onChange={(e) => updateCondition(index, { ...condition, conjunction: e.target.value })}
                  className="w-full px-2 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="AND">AND</option>
                  <option value="OR">OR</option>
                </select>
              )}
            </div>
            <div className="flex-grow">
              <AdvancedSearchCondition
                condition={condition}
                updateCondition={(newCondition) => updateCondition(index, newCondition)}
                fieldOptions={fieldOptions}
                allLists={allLists}
                allCategories={allCategories}
              />
            </div>
            <button
              onClick={() => removeCondition(index)}
              className="ml-2 p-2 text-red-600 hover:text-red-800 focus:outline-none"
              aria-label="Remove condition"
            >
              <Trash2 size={20} />
            </button>
          </div>
        ))}
      </div>
      <div className="flex justify-center mt-4">
        <button
          onClick={addCondition}
          className="flex items-center justify-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <Plus size={20} className="mr-2" />
          Add condition
        </button>
      </div>
    </div>
  );
};

export default AdvancedSearch;



================================================================================
File: src/components/AdvancedSearchCondition.js
================================================================================
import React from 'react';
import { getOperators, getInputType } from '../utils/sortUtils';

const AdvancedSearchCondition = ({ condition, updateCondition, fieldOptions, allLists, allCategories }) => {
  const renderInput = () => {
    const inputType = getInputType(condition.field);
    const inputClass = "w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500";
    
    switch (inputType) {
      case 'number':
        return (
          <input
            type="number"
            value={condition.value}
            onChange={(e) => updateCondition({ ...condition, value: e.target.value })}
            className={inputClass}
          />
        );
      case 'date':
        return (
          <input
            type="date"
            value={condition.value}
            onChange={(e) => updateCondition({ ...condition, value: e.target.value })}
            className={inputClass}
          />
        );
      case 'list':
        const options = condition.field === 'lists' ? allLists : allCategories;
        return (
          <select
            multiple
            value={condition.value.split(',')}
            onChange={(e) => updateCondition({ ...condition, value: Array.from(e.target.selectedOptions, option => option.value).join(',') })}
            className={inputClass}
          >
            {options.map(option => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
        );
      default:
        return (
          <input
            type="text"
            value={condition.value}
            onChange={(e) => updateCondition({ ...condition, value: e.target.value })}
            className={inputClass}
          />
        );
    }
  };

  const fieldType = getInputType(condition.field);
  const operators = getOperators(fieldType);

  return (
    <div className="flex items-center space-x-2">
      <select
        value={condition.field}
        onChange={(e) => updateCondition({ ...condition, field: e.target.value, operator: getOperators(getInputType(e.target.value))[0].value })}
        className="w-1/3 px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        {fieldOptions.map(option => (
          <option key={option.value} value={option.value}>{option.label}</option>
        ))}
      </select>
      <select
        value={condition.operator}
        onChange={(e) => updateCondition({ ...condition, operator: e.target.value })}
        className="w-1/3 px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        {operators.map(op => (
          <option key={op.value} value={op.value}>{op.label}</option>
        ))}
      </select>
      <div className="w-1/3">
        {renderInput()}
      </div>
    </div>
  );
};

export default AdvancedSearchCondition;



================================================================================
File: src/components/ArXivBadge.js
================================================================================
import React from 'react';
import { FileText } from 'lucide-react';
import { extractArXivId } from '../utils/arxivUtils';

const ArXivBadge = ({ arxivInfo, arxivMetadata }) => {
  const arxivId = extractArXivId(arxivInfo.primary_id || arxivInfo.primary_url);
  const paperMetadata = arxivMetadata[arxivId];

  return (
    <div className="flex items-center space-x-2">
      <a
        href={`https://arxiv.org/abs/${arxivId}`}
        target="_blank"
        rel="noopener noreferrer"
        className="inline-flex items-center px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        onClick={(e) => e.stopPropagation()}
      >
        <FileText size={14} className="mr-1" />
        arXiv
      </a>
      {paperMetadata && paperMetadata.categories && paperMetadata.categories.length > 0 && (
        <span className="text-xs text-gray-500">{paperMetadata.categories[0]['@term']}</span>
      )}
    </div>
  );
};

export default ArXivBadge;



================================================================================
File: src/components/Dashboard.js
================================================================================
import React, { useState } from 'react';
import { Search, SlidersHorizontal, ArrowDown, ArrowUp, ChevronDown, ChevronUp, Github as GithubIcon } from 'lucide-react';
import SortDropdown from './SortDropdown';
import AdvancedSearch from './AdvancedSearch';
import ArXivBadge from './ArXivBadge';
import ExpandedRepoView from './ExpandedRepoView';
import useRepositories from '../hooks/useRepositories';
import { fieldOptions } from '../utils/sortUtils';

const Dashboard = () => {
  const [expandedRepo, setExpandedRepo] = useState(null);
  const [showAdvancedSearch, setShowAdvancedSearch] = useState(false);

  const {
    data,
    filteredRepos,
    allLists,
    allCategories,
    handleSortChange,
    toggleSortDirection,
    arxivMetadata,
    sortOption,
    sortDirection,
    textSearch,
    setTextSearch,
    searchConditions,
    setSearchConditions
  } = useRepositories();

  const toggleRepoExpansion = (name, event) => {
    // Prevent toggling if the click was on the GitHub link
    if (event.target.closest('a')) return;
    setExpandedRepo(expandedRepo === name ? null : name);
  };

  const handleSearchSubmit = (e) => {
    e.preventDefault();
    console.log("Search submitted:", textSearch);
  };

  if (!data) {
    return <div className="flex items-center justify-center h-screen text-2xl">Loading...</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <header className="mb-8">
        {/* Header content */}
        <form onSubmit={handleSearchSubmit} className="flex items-center mb-4">
          <input
            type="text"
            placeholder="Search repositories..."
            value={textSearch}
            onChange={(e) => setTextSearch(e.target.value)}
            className="flex-grow px-4 py-2 rounded-l-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <button
            type="submit"
            className="px-4 py-2 bg-blue-500 text-white rounded-r-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
            aria-label="Search"
          >
            <Search size={20} />
          </button>
        </form>
        <div className="flex justify-between items-center mb-4">
          <button
            onClick={() => setShowAdvancedSearch(!showAdvancedSearch)}
            className="flex items-center px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <SlidersHorizontal size={20} className="mr-2" />
            {showAdvancedSearch ? 'Hide' : 'Show'} Advanced Search
          </button>
          <div className="flex items-center space-x-2">
            <SortDropdown 
              sortOption={sortOption}
              sortDirection={sortDirection}
              handleSortChange={handleSortChange}
            />
            <button
              onClick={toggleSortDirection}
              className="p-2 bg-gray-200 rounded-full hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
              aria-label={`Sort ${sortDirection === 'desc' ? 'descending' : 'ascending'}`}
            >
              {sortDirection === 'desc' ? <ArrowDown size={20} /> : <ArrowUp size={20} />}
            </button>
          </div>
        </div>
        {showAdvancedSearch && (
          <AdvancedSearch 
            conditions={searchConditions}
            setConditions={setSearchConditions}
            fieldOptions={fieldOptions}
            allLists={allLists}
            allCategories={allCategories}
          />
        )}
      </header>
      
      <main>
        <h2 className="text-2xl font-semibold mb-4">Repositories ({filteredRepos.length})</h2>
        <ul className="space-y-4">
          {filteredRepos.map(([name, repo]) => (
            <li key={name} className="bg-white shadow rounded-lg overflow-hidden">
              <div 
                className="px-6 py-4 cursor-pointer hover:bg-gray-50"
                onClick={(e) => toggleRepoExpansion(name, e)}
              >
                <div className="flex justify-between items-center">
                  <div className="flex items-center space-x-4">
                    <a
                      href={`https://github.com/${name}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:underline flex items-center"
                      onClick={(e) => e.stopPropagation()} // Prevent toggling when clicking the link
                    >
                      <GithubIcon size={20} className="mr-1" />
                      {name}
                    </a>
                    <span className="text-sm font-medium text-gray-600">{repo.metadata.stars} ★</span>
                    {repo.arxiv && (repo.arxiv.primary_id || repo.arxiv.primary_url) && (
                      <ArXivBadge arxivInfo={repo.arxiv} arxivMetadata={arxivMetadata} />
                    )}
                  </div>
                  {expandedRepo === name ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
                </div>
                <p className="text-sm text-gray-600 mt-2">{repo.metadata.description}</p>
              </div>
              {expandedRepo === name && (
                <ExpandedRepoView repo={repo} name={name} arxivMetadata={arxivMetadata} />
              )}
            </li>
          ))}
        </ul>
      </main>
    </div>
  );
};

export default Dashboard;



================================================================================
File: src/components/ExpandedRepoView.js
================================================================================
import React from 'react';
import { extractArXivId } from '../utils/arxivUtils';

const ExpandedRepoView = ({ repo, name, arxivMetadata }) => {
  const arxivId = extractArXivId(repo.arxiv?.primary_id || repo.arxiv?.primary_url);
  const paperMetadata = arxivMetadata[arxivId];

  return (
    <div className="px-6 py-4 border-t border-gray-100">
      <p className="text-gray-700 mb-2">{repo.metadata.description}</p>
      <p className="text-sm text-gray-600 mb-2">Language: {repo.metadata.language}</p>
      <p className="text-sm text-gray-600 mb-2">Created: {new Date(repo.metadata.created_at).toLocaleDateString()}</p>
      <p className="text-sm text-gray-600 mb-2">Last updated: {new Date(repo.metadata.updated_at).toLocaleDateString()}</p>
      <p className="text-sm text-gray-600 mb-2">Last pushed: {new Date(repo.metadata.pushed_at).toLocaleDateString()}</p>
      <p className="text-sm text-gray-600 mb-2">Starred at: {new Date(repo.metadata.starred_at).toLocaleDateString()}</p>
      {repo.lists && repo.lists.length > 0 && (
        <p className="text-sm text-gray-600 mb-2">Lists: {repo.lists.join(', ')}</p>
      )}
      {paperMetadata && (
        <div className="mt-4">
          <h4 className="text-lg font-semibold mb-2">arXiv Paper Details</h4>
          <p className="text-sm text-gray-700 mb-1">Title: {paperMetadata.title}</p>
          <p className="text-sm text-gray-700 mb-1">Authors: {paperMetadata.authors.join(', ')}</p>
          <p className="text-sm text-gray-700 mb-1">Published: {new Date(paperMetadata.published).toLocaleDateString()}</p>
          <p className="text-sm text-gray-700 mb-1">Last Updated: {new Date(paperMetadata.updated).toLocaleDateString()}</p>
          <p className="text-sm text-gray-700 mb-1">Categories: {paperMetadata.categories.map(cat => cat['@term']).join(', ')}</p>
          <details className="mt-2">
            <summary className="text-sm text-blue-600 cursor-pointer">Abstract</summary>
            <p className="text-sm text-gray-700 mt-1">{paperMetadata.abstract}</p>
          </details>
        </div>
      )}
    </div>
  );
};

export default ExpandedRepoView;



================================================================================
File: src/components/SortDropdown.js
================================================================================
import React, { useState } from 'react';
import { ChevronDown, ChevronUp } from 'lucide-react';

const SortDropdown = ({ sortOption, sortDirection, handleSortChange }) => {
  const [isOpen, setIsOpen] = useState(false);
  const options = [
    { value: 'stars', label: 'Stars' },
    { value: 'name', label: 'Name' },
    { value: 'updated_at', label: 'Last Updated' },
    { value: 'created_at', label: 'Created' },
    { value: 'pushed_at', label: 'Last Pushed' },
    { value: 'starred_at', label: 'Starred At' },
    { value: 'arxiv_published', label: 'arXiv Published Date' },
    { value: 'arxiv_updated', label: 'arXiv Updated Date' },
  ];

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center justify-between w-48 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-blue-500"
      >
        {options.find(opt => opt.value === sortOption).label}
        {isOpen ? <ChevronUp className="w-5 h-5 ml-2" /> : <ChevronDown className="w-5 h-5 ml-2" />}
      </button>
      {isOpen && (
        <div className="absolute right-0 w-56 mt-2 origin-top-right bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5">
          <div className="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
            {options.map((option) => (
              <button
                key={option.value}
                onClick={() => {
                  handleSortChange(option.value);
                  setIsOpen(false);
                }}
                className="flex items-center justify-between w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                role="menuitem"
              >
                {option.label}
                {sortOption === option.value && (
                  <span>{sortDirection === 'desc' ? '▼' : '▲'}</span>
                )}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default SortDropdown;


